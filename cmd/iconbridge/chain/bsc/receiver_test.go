package bsc

import (
	"bytes"
	"context"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"math/big"
	"testing"
	"time"

	"github.com/ethereum/go-ethereum"

	ethCommon "github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	ethTypes "github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/icon-project/icon-bridge/cmd/e2etest/chain/bsc/abi/bmcperiphery"
	"github.com/icon-project/icon-bridge/cmd/iconbridge/chain"
	"github.com/icon-project/icon-bridge/cmd/iconbridge/chain/bsc/mocks"
	"github.com/icon-project/icon-bridge/cmd/iconbridge/chain/bsc/types"
	"github.com/icon-project/icon-bridge/common/intconv"
	"github.com/icon-project/icon-bridge/common/log"
	"github.com/icon-project/icon-bridge/common/wallet"
	"github.com/pkg/errors"
	"github.com/stretchr/testify/mock"
	"github.com/stretchr/testify/require"
)

const (
	BSC_BMC_PERIPHERY = "btp://0x61.bsc/0xB4fC4b3b4e3157448B7D279f06BC8e340d63e2a9"
)

func newTestReceiver(t *testing.T, src, dst chain.BTPAddress) chain.Receiver {
	url := "https://data-seed-prebsc-1-s1.binance.org:8545"
	mp := map[string]interface{}{"syncConcurrency": 2}
	res, err := json.Marshal(mp)
	require.NoError(t, err)
	receiver, err := NewReceiver(src, dst, []string{url}, res, log.New())
	if err != nil {
		t.Fatalf("%+v", err)
	}
	return receiver
}

func newTestClient(t *testing.T, bmcAddr string) IClient {
	url := "https://data-seed-prebsc-1-s1.binance.org:8545"
	cls, err := newClients([]string{url}, bmcAddr, log.New())
	require.NoError(t, err)
	return cls[0]
}

/*
func TestMedianGasPrice(t *testing.T) {
	url := "https://data-seed-prebsc-1-s1.binance.org:8545"
	cls, err := newClients([]string{url}, BSC_BMC_PERIPHERY, log.New())
	require.NoError(t, err)

	_, _, err = cls[0].GetMedianGasPriceForBlock(context.Background())
	require.NoError(t, err)
}

func TestFilterLogs(t *testing.T) {
	var src, dst chain.BTPAddress
	err := src.Set(BSC_BMC_PERIPHERY)
	require.NoError(t, err)
	err = dst.Set(ICON_BMC)
	require.NoError(t, err)

	recv := newTestReceiver(t, src, dst).(*receiver)
	if recv == nil {
		t.Fatal(errors.New("Receiver is nil"))
	}
	exists, err := recv.hasBTPMessage(context.Background(), big.NewInt(BlockHeight))
	require.NoError(t, err)
	if !exists {
		require.NoError(t, errors.New("Expected true"))
	}
}

func TestSubscribeMessage(t *testing.T) {
	var src, dst chain.BTPAddress
	err := src.Set(BSC_BMC_PERIPHERY)
	err = dst.Set(ICON_BMC)
	if err != nil {
		fmt.Println(err)
	}

	recv := newTestReceiver(t, src, dst).(*receiver)

	ctx, cancel := context.Background(), func() {}
	if deadline, ok := t.Deadline(); ok {
		ctx, cancel = context.WithDeadline(context.Background(), deadline)
	}
	defer cancel()
	srcMsgCh := make(chan *chain.Message)
	srcErrCh, err := recv.Subscribe(ctx,
		srcMsgCh,
		chain.SubscribeOptions{
			Seq:    75,
			Height: uint64(BlockHeight),
		})
	require.NoError(t, err, "failed to subscribe")

	for {
		defer cancel()
		select {
		case err := <-srcErrCh:
			t.Logf("subscription closed: %v", err)
			t.FailNow()
		case msg := <-srcMsgCh:
			if len(msg.Receipts) > 0 && msg.Receipts[0].Height == 21447824 {
				// received event exit
				return
			}
		}
	}
}

func TestReceiver_GetReceiptProofs(t *testing.T) {
	cl := newTestClient(t, BSC_BMC_PERIPHERY)
	header, err := cl.GetHeaderByHeight(big.NewInt(BlockHeight))
	require.NoError(t, err)
	hash := header.Hash()
	receipts, err := cl.GetBlockReceipts(hash)
	require.NoError(t, err)
	receiptsRoot := ethTypes.DeriveSha(receipts, trie.NewStackTrie(nil))
	if !bytes.Equal(receiptsRoot.Bytes(), header.ReceiptHash.Bytes()) {
		err = fmt.Errorf(
			"invalid receipts: remote=%v, local=%v",
			header.ReceiptHash, receiptsRoot)
		require.NoError(t, err)
	}
}

func TestVerify(t *testing.T) {
	height := uint64(22169979)
	blockHash, err := hexutil.Decode("0x489b5865c1b015fa03177c30a4286533f02d2086c3db5f751180519f872fc37f")
	require.NoError(t, err)
	validatorData, err := hexutil.Decode("0xd98301010b846765746889676f312e31362e3130856c696e75780000de3b3a04049153b8dae0a232ac90d20c78f1a5d1de7b7dc51284214b9b9c85549ab3d2b972df0deef66ac2c935552c16704d214347f29fa77f77da6d75d7c7526d6247501b822fd4eaa76fcb64baea360279497f96c5d20b2a975c050e4220be276ace4892f4b41a980a75ecd1309ea12fa2ed87a8744fbfc9b863d5a2959d3f95eae5dc7d70144ce1b73b403b7eb6e0b71b214cb885500844365e95cd9942c7276e7fd833329df8450664d5960414752117d15811254efed1fb30e82660f82ce03df6536cc69315173fea12f202c1c1d0d165d5efb87dc2882d1602fdd3c1a11a03c86e01")
	require.NoError(t, err)
	opts := VerifierOptions{
		BlockHeight:   height,
		BlockHash:     blockHash,
		ValidatorData: validatorData,
	}
	vr := &Verifier{
		mu:                         sync.RWMutex{},
		next:                       big.NewInt(int64(opts.BlockHeight)),
		parentHash:                 common.BytesToHash(opts.BlockHash),
		validators:                 map[ethCommon.Address]bool{},
		chainID:                    big.NewInt(97),
		useNewValidatorsFromHeight: big.NewInt(int64(opts.BlockHeight)),
	}
	vr.validators, err = getValidatorMapFromHex(opts.ValidatorData)
	require.NoError(t, err)
	cl := newTestClient(t, BSC_BMC_PERIPHERY)
	header, err := cl.GetHeaderByHeight(big.NewInt(int64(opts.BlockHeight)))
	require.NoError(t, err)
	newHeader, err := cl.GetHeaderByHeight(big.NewInt(int64(opts.BlockHeight + 1)))
	require.NoError(t, err)
	err = vr.Verify(header, newHeader, nil)
	require.NoError(t, err)

}

func TestSender_NewObj(t *testing.T) {
	//senderOpts := `{"gas_limit": 24000000,"tx_data_size_limit": 8192,"balance_threshold": "100000000000000000000","boost_gas_price": 1}`
	thres := intconv.BigInt{}
	thres.SetString("100000000000000000000", 10)
	sopts := senderOptions{
		GasLimit:         24000000,
		TxDataSizeLimit:  8192,
		BalanceThreshold: thres,
		BoostGasPrice:    1,
	}
	raw, err := json.Marshal(sopts)
	privKey, err := crypto.GenerateKey()
	require.NoError(t, err)
	url := "https://data-seed-prebsc-1-s1.binance.org:8545"
	s, err := NewSender(
		chain.BTPAddress(BSC_BMC_PERIPHERY),
		chain.BTPAddress(ICON_BMC),
		[]string{url}, &wallet.EvmWallet{Skey: privKey, Pkey: &privKey.PublicKey},
		raw,
		log.New(),
	)
	require.NoError(t, err)
	balance, threshold, err := s.Balance(context.TODO())
	require.NoError(t, err)
	require.Equal(t, balance.Cmp(big.NewInt(0)), 0)
	require.Equal(t, threshold.String(), thres.String())

	msg := &chain.Message{
		From: "",
		Receipts: []*chain.Receipt{{
			Index:  0,
			Height: 1,
			Events: []*chain.Event{},
		}},
	}
	tx, _, err := s.Segment(context.TODO(), msg)
	require.NoError(t, err)
	err = tx.Send(context.TODO())
	require.Equal(t, err.Error(), "InsufficientBalance")
}
*/
func TestReceiver_MockReceiverOptions_UnmarshalWithVerifier(t *testing.T) {
	var opts ReceiverOptions
	jsonReceiverOptions := `{"syncConcurrency":100,"verifier":{"blockHeight":22169979,"parentHash":"0x489b5865c1b015fa03177c30a4286533f02d2086c3db5f751180519f872fc37f", "validatorData":"0xd98301010b846765746889676f312e31362e3130856c696e75780000de3b3a04049153b8dae0a232ac90d20c78f1a5d1de7b7dc51284214b9b9c85549ab3d2b972df0deef66ac2c935552c16704d214347f29fa77f77da6d75d7c7526d6247501b822fd4eaa76fcb64baea360279497f96c5d20b2a975c050e4220be276ace4892f4b41a980a75ecd1309ea12fa2ed87a8744fbfc9b863d5a2959d3f95eae5dc7d70144ce1b73b403b7eb6e0b71b214cb885500844365e95cd9942c7276e7fd833329df8450664d5960414752117d15811254efed1fb30e82660f82ce03df6536cc69315173fea12f202c1c1d0d165d5efb87dc2882d1602fdd3c1a11a03c86e01"}}`

	json.Unmarshal([]byte(jsonReceiverOptions), &opts)
	require.NotNil(t, opts)
	require.NotNil(t, opts.Verifier)
	require.NotNil(t, opts.SyncConcurrency)
	require.EqualValues(t, 100, opts.SyncConcurrency)
	require.NotNil(t, opts.Verifier.BlockHeight)
	require.EqualValues(t, 22169979, opts.Verifier.BlockHeight)
	require.NotNil(t, opts.Verifier.BlockHash)
	require.EqualValues(t, "0x489b5865c1b015fa03177c30a4286533f02d2086c3db5f751180519f872fc37f", opts.Verifier.BlockHash.String())
	require.NotNil(t, opts.Verifier.ValidatorData)
	require.EqualValues(t, "0xd98301010b846765746889676f312e31362e3130856c696e75780000de3b3a04049153b8dae0a232ac90d20c78f1a5d1de7b7dc51284214b9b9c85549ab3d2b972df0deef66ac2c935552c16704d214347f29fa77f77da6d75d7c7526d6247501b822fd4eaa76fcb64baea360279497f96c5d20b2a975c050e4220be276ace4892f4b41a980a75ecd1309ea12fa2ed87a8744fbfc9b863d5a2959d3f95eae5dc7d70144ce1b73b403b7eb6e0b71b214cb885500844365e95cd9942c7276e7fd833329df8450664d5960414752117d15811254efed1fb30e82660f82ce03df6536cc69315173fea12f202c1c1d0d165d5efb87dc2882d1602fdd3c1a11a03c86e01", opts.Verifier.ValidatorData.String())
}

func TestReceiver_MockReceiverOptions_UnmarshalWithoutVerifier(t *testing.T) {
	// Verifier should be nil if not passed
	var empty_opts ReceiverOptions
	jsonReceiverOptions := `{"syncConcurrency":100}`
	json.Unmarshal([]byte(jsonReceiverOptions), &empty_opts)
	require.NotNil(t, empty_opts)
	require.Nil(t, empty_opts.Verifier)
	require.NotNil(t, empty_opts.SyncConcurrency)
	require.EqualValues(t, 100, empty_opts.SyncConcurrency)
}

func TestReceiver_MockNewVerifier(t *testing.T) {
	// verifier options
	height := int64(22169979)
	blockHash, err := hexutil.Decode("0x489b5865c1b015fa03177c30a4286533f02d2086c3db5f751180519f872fc37f")
	require.NoError(t, err)
	validatorData, err := hexutil.Decode("0xd98301010b846765746889676f312e31362e3130856c696e75780000de3b3a04049153b8dae0a232ac90d20c78f1a5d1de7b7dc51284214b9b9c85549ab3d2b972df0deef66ac2c935552c16704d214347f29fa77f77da6d75d7c7526d6247501b822fd4eaa76fcb64baea360279497f96c5d20b2a975c050e4220be276ace4892f4b41a980a75ecd1309ea12fa2ed87a8744fbfc9b863d5a2959d3f95eae5dc7d70144ce1b73b403b7eb6e0b71b214cb885500844365e95cd9942c7276e7fd833329df8450664d5960414752117d15811254efed1fb30e82660f82ce03df6536cc69315173fea12f202c1c1d0d165d5efb87dc2882d1602fdd3c1a11a03c86e01")
	require.NoError(t, err)
	opts := &VerifierOptions{
		BlockHeight:   uint64(height),
		BlockHash:     blockHash,
		ValidatorData: validatorData,
	}
	validatorMap := map[ethCommon.Address]bool{
		ethCommon.HexToAddress("0x049153b8DAe0a232Ac90D20C78f1a5D1dE7B7dc5"): true,
		ethCommon.HexToAddress("0x1284214b9b9c85549aB3D2b972df0dEEf66aC2c9"): true,
		ethCommon.HexToAddress("0x35552c16704d214347f29Fa77f77DA6d75d7C752"): true,
		ethCommon.HexToAddress("0x6d6247501b822FD4Eaa76FCB64bAEa360279497f"): true,
		ethCommon.HexToAddress("0x96C5D20b2a975c050e4220BE276ACe4892f4b41A"): true,
		ethCommon.HexToAddress("0x980A75eCd1309eA12fa2ED87A8744fBfc9b863D5"): true,
		ethCommon.HexToAddress("0xA2959D3F95eAe5dC7D70144Ce1b73b403b7EB6E0"): true,
		ethCommon.HexToAddress("0xB71b214Cb885500844365E95CD9942C7276E7fD8"): true,
	}

	// mock client
	cl := new(mocks.IClient)
	cl.On("GetChainID").Return(big.NewInt(97))
	cl.On("GetHeaderByHeight", mock.Anything, big.NewInt(height)).Return(&ethTypes.Header{ParentHash: ethCommon.BytesToHash(blockHash)}, nil)
	cl.On("GetHeaderByHeight", mock.Anything, big.NewInt(height-height%int64(defaultEpochLength))).Return(&ethTypes.Header{Extra: validatorData}, nil)

	rx := &receiver{
		cls: []IClient{cl},
	}
	vr, err := rx.newVerifier(context.Background(), opts)
	require.NoError(t, err)

	require.NotNil(t, vr)
	require.Nil(t, err)
	require.Equal(t, vr.Next().Cmp(big.NewInt(int64(opts.BlockHeight))), 0)
	require.Equal(t, vr.ParentHash().String(), opts.BlockHash.String())
	for k := range validatorMap {
		require.Equal(t, vr.IsValidator(k, big.NewInt(height)), true)
	}
	require.Equal(t, vr.IsValidator(ethCommon.HexToAddress("abc"), big.NewInt(height)), false)
}

func TestReceiver_MockVerifyAndUpdate_CorrectHeader(t *testing.T) {
	height := int64(22169979)
	blockHash, err := hexutil.Decode("0x489b5865c1b015fa03177c30a4286533f02d2086c3db5f751180519f872fc37f")
	require.NoError(t, err)
	validatorData, err := hexutil.Decode("0xd98301010b846765746889676f312e31362e3130856c696e75780000de3b3a04049153b8dae0a232ac90d20c78f1a5d1de7b7dc51284214b9b9c85549ab3d2b972df0deef66ac2c935552c16704d214347f29fa77f77da6d75d7c7526d6247501b822fd4eaa76fcb64baea360279497f96c5d20b2a975c050e4220be276ace4892f4b41a980a75ecd1309ea12fa2ed87a8744fbfc9b863d5a2959d3f95eae5dc7d70144ce1b73b403b7eb6e0b71b214cb885500844365e95cd9942c7276e7fd833329df8450664d5960414752117d15811254efed1fb30e82660f82ce03df6536cc69315173fea12f202c1c1d0d165d5efb87dc2882d1602fdd3c1a11a03c86e01")
	require.NoError(t, err)
	opts := &VerifierOptions{
		BlockHeight:   uint64(height),
		BlockHash:     blockHash,
		ValidatorData: validatorData,
	}

	// Header
	headerStr := "7b22706172656e7448617368223a22307834383962353836356331623031356661303331373763333061343238363533336630326432303836633364623566373531313830353139663837326663333766222c2273686133556e636c6573223a22307831646363346465386465633735643761616238356235363762366363643431616433313234353162393438613734313366306131343266643430643439333437222c226d696e6572223a22307836643632343735303162383232666434656161373666636236346261656133363032373934393766222c227374617465526f6f74223a22307863336334343462666261656634333061666633376463613830363765656333653831656230663766633561653737656132663438383539363762613862666533222c227472616e73616374696f6e73526f6f74223a22307834626466323861626539373931373561393961613035323438363139643163393662653332623136343533306266333339363662326264373164376466643535222c227265636569707473526f6f74223a22307866396231623165616534383737353236373031316163613030616533353264656233663431353237346237333462353765643935633736643863656232643762222c226c6f6773426c6f6f6d223a2230783030323030383030323030323030613031303030303032303231303030323030303030383030383030303138303030303430313030303130313330303034313030343038303030303030343030303030303038383438303430343130303030303034303030303030313030363030303434303034303430323030323032393038313030313830313030303030303238303830303430343239303032303030303132383130383631313030323031303332303134323138303231383830303134313030383331303230306230323032343030303030383330383030323034383030306130303030303030313031303030303030343030303130303038306535343431303030383030343030303030303430323030303430343230303030303030323430303430343830313030303031313230303030303031303030323030303230303330303030353161303030343130303061303030323030303032303030303030303030613030303030303030303030303030303030313831383030303033383030303032353032303030303030303030383832303031303030303030313434313034303230303030303030303230383038303063383032323430383730313230303130303230303030303032303532303930303230383863303030303030316330303030303830343631303030303230303030323830303632303030343034222c22646966666963756c7479223a22307832222c226e756d626572223a22307831353234393762222c226761734c696d6974223a22307831636133343235222c2267617355736564223a223078316361376336222c2274696d657374616d70223a2230783633303335313931222c22657874726144617461223a2230786439383330313031306138343637363537343638383936373666333132653331333632653331333538353663363936653735373830303030646533623361303466613632643864323262353265636333366436646638336432376333663932643462373931626566336466366263643838326332616366343262663830336130333636653639356433646365333366623630393337656137323730353966383361643337383032336139323435316639366338363034626339316466633935343030222c226d697848617368223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030222c226e6f6e6365223a22307830303030303030303030303030303030222c2262617365466565506572476173223a6e756c6c2c2268617368223a22307830356333646335303335633335643431396336333064366138386537383431616335633937653232373164633966303936623139643561316266316536353036227d"
	nextHeaderStr := "7b22706172656e7448617368223a22307830356333646335303335633335643431396336333064366138386537383431616335633937653232373164633966303936623139643561316266316536353036222c2273686133556e636c6573223a22307831646363346465386465633735643761616238356235363762366363643431616433313234353162393438613734313366306131343266643430643439333437222c226d696e6572223a22307839366335643230623261393735633035306534323230626532373661636534383932663462343161222c227374617465526f6f74223a22307866653232626564613965356162386464363563316538323363376337643438326662306633653766653439363433323035663134613865356463636636306632222c227472616e73616374696f6e73526f6f74223a22307866323931613135306461386137366332383032363434313061326635306339366462353536633130656336313462653136313732633632313165656335656466222c227265636569707473526f6f74223a22307861366337653333633162376631646561663766393162343464393834363164626339326163353136333837373237326632353239373561363363336138653263222c226c6f6773426c6f6f6d223ac22646966666963756c7479223a22307832222c226e756d626572223a22307831353234393763222c226761734c696d6974223a22307831633963333830222c2267617355736564223a223078393162363162222c2274696d657374616d70223a2230783633303335313934222c22657874726144617461223a2230786438383330313031306238343637363537343638383836373666333132653331333832653332383536633639366537353738303030303030646533623361303430646537653531623362656236613461343862663564366462613139326436633366383632623638373965316439363532623562313134653164393137373733333065386161346130373963306135316263396336303233333433323731303761626339323130396231626537643030333133373239376336366637376633343031222c226d697848617368223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030222c226e6f6e6365223a22307830303030303030303030303030303030222c2262617365466565506572476173223a6e756c6c2c2268617368223a22307831396434316131373561343734656236356435386335316136323239336338343563333364666361633637343761303665613338306134373561356534383861227d"
	next2HeaderStr := "7b22706172656e7448617368223a22307831396434316131373561343734656236356435386335316136323239336338343563333364666361633637343761303665613338306134373561356534383861222c2273686133556e636c6573223a22307831646363346465386465633735643761616238356235363762366363643431616433313234353162393438613734313366306131343266643430643439333437222c226d696e6572223a22307839383061373565636431333039656131326661326564383761383734346662666339623836336435222c227374617465526f6f74223a22307836636331643562373964636132346339303933623666643534353536303163643066633937363762383936623430623432633361646638613035303862313836222c227472616e73616374696f6e73526f6f74223a22307832366136326137393337643437623665333361623336343730376164303463326331633765373233643132386237363433353461613933396334316362393134222c227265636569707473526f6f74223a22307836303733363530636239626536373031323664626662623936653234663430343934366631383931613062313531316365336336363830363032663361666565222c226c6f6773426c6f6f6d223ac22646966666963756c7479223a22307832222c226e756d626572223a22307831353234393764222c226761734c696d6974223a22307831636133356566222c2267617355736564223a223078313061613962222c2274696d657374616d70223a2230783633303335313937222c22657874726144617461223a2230786438383330313031306238343637363537343638383836373666333132653331333532653335383536633639366537353738303030303030646533623361303439336132343635373634373531333438323239303762656364636661353561343330353631386532363463633634316639383934316239333765353661643163353138383335343335663963366630366163663865383939626364646363316237653630363639643237366230326465306466316131626332353338356164623030222c226d697848617368223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030222c226e6f6e6365223a22307830303030303030303030303030303030222c2262617365466565506572476173223a6e756c6c2c2268617368223a22307831303961313932363133396664663165363231626637323862323561383430346434333037383139633430643466326431666333396561636165663533663530227d"
	headerBytes, err := hex.DecodeString(headerStr)
	require.NoError(t, err)
	nextHeaderBytes, err := hex.DecodeString(nextHeaderStr)
	require.NoError(t, err)
	next2HeaderBytes, err := hex.DecodeString(next2HeaderStr)
	require.NoError(t, err)
	header := new(ethTypes.Header)
	nextHeader := new(ethTypes.Header)
	next2Header := new(ethTypes.Header)
	err = json.Unmarshal(headerBytes, header)
	require.NoError(t, err)
	err = json.Unmarshal(nextHeaderBytes, nextHeader)
	require.NoError(t, err)
	err = json.Unmarshal(next2HeaderBytes, next2Header)
	require.NoError(t, err)
	validatorMap := map[ethCommon.Address]bool{
		ethCommon.HexToAddress("0x049153b8DAe0a232Ac90D20C78f1a5D1dE7B7dc5"): true,
		ethCommon.HexToAddress("0x1284214b9b9c85549aB3D2b972df0dEEf66aC2c9"): true,
		ethCommon.HexToAddress("0x35552c16704d214347f29Fa77f77DA6d75d7C752"): true,
		ethCommon.HexToAddress("0x6d6247501b822FD4Eaa76FCB64bAEa360279497f"): true,
		ethCommon.HexToAddress("0x96C5D20b2a975c050e4220BE276ACe4892f4b41A"): true,
		ethCommon.HexToAddress("0x980A75eCd1309eA12fa2ED87A8744fBfc9b863D5"): true,
		ethCommon.HexToAddress("0xA2959D3F95eAe5dC7D70144Ce1b73b403b7EB6E0"): true,
		ethCommon.HexToAddress("0xB71b214Cb885500844365E95CD9942C7276E7fD8"): true,
	}

	// Client
	cl := new(mocks.IClient)
	cl.On("GetChainID").Return(big.NewInt(97))
	cl.On("GetHeaderByHeight", mock.Anything, big.NewInt(height)).Return(header, nil)
	cl.On("GetHeaderByHeight", mock.Anything, big.NewInt(height+1)).Return(nextHeader, nil)
	cl.On("GetHeaderByHeight", mock.Anything, big.NewInt(height+2)).Return(next2Header, nil)
	cl.On("GetHeaderByHeight", mock.Anything, big.NewInt(height-height%int64(defaultEpochLength))).Return(&ethTypes.Header{Extra: validatorData}, nil)

	rx := &receiver{
		cls: []IClient{cl},
	}
	vr, err := rx.newVerifier(context.Background(), opts)

	err = vr.Verify(header, nextHeader, nil)
	require.NoError(t, err)
	err = vr.Update(header) // should not update because header.Number % defaultEpochLength != 0
	require.NoError(t, err)
	require.Equal(t, vr.ParentHash().String(), header.Hash().String())
	require.Equal(t, vr.Next().Cmp((&big.Int{}).Add(header.Number, big.NewInt(1))), 0)
	for k := range validatorMap {
		require.Equal(t, vr.IsValidator(k, big.NewInt(height)), true)
	}
	require.Equal(t, vr.IsValidator(ethCommon.HexToAddress("abc"), big.NewInt(height)), false)
	err = vr.Verify(nextHeader, next2Header, nil)
	require.NoError(t, err)
	err = vr.Update(nextHeader)
	require.NoError(t, err)
	require.Equal(t, vr.ParentHash().String(), nextHeader.Hash().String())
	require.Equal(t, vr.Next().Cmp((&big.Int{}).Add(nextHeader.Number, big.NewInt(1))), 0)
	for k := range validatorMap {
		require.Equal(t, vr.IsValidator(k, big.NewInt(height)), true)
	}
}

func TestReceiver_MockSyncVerifier(t *testing.T) {
	height := int64(22169979)
	blockHash, err := hexutil.Decode("0x489b5865c1b015fa03177c30a4286533f02d2086c3db5f751180519f872fc37f")
	require.NoError(t, err)
	validatorData, err := hexutil.Decode("0xd98301010b846765746889676f312e31362e3130856c696e75780000de3b3a04049153b8dae0a232ac90d20c78f1a5d1de7b7dc51284214b9b9c85549ab3d2b972df0deef66ac2c935552c16704d214347f29fa77f77da6d75d7c7526d6247501b822fd4eaa76fcb64baea360279497f96c5d20b2a975c050e4220be276ace4892f4b41a980a75ecd1309ea12fa2ed87a8744fbfc9b863d5a2959d3f95eae5dc7d70144ce1b73b403b7eb6e0b71b214cb885500844365e95cd9942c7276e7fd833329df8450664d5960414752117d15811254efed1fb30e82660f82ce03df6536cc69315173fea12f202c1c1d0d165d5efb87dc2882d1602fdd3c1a11a03c86e01")
	require.NoError(t, err)
	opts := &VerifierOptions{
		BlockHeight:   uint64(height),
		BlockHash:     blockHash,
		ValidatorData: validatorData,
	}

	// Header
	headerStr := "7b22706172656e7448617368223a22307834383962353836356331623031356661303331373763333061343238363533336630326432303836633364623566373531313830353139663837326663333766222c2273686133556e636c6573223a22307831646363346465386465633735643761616238356235363762366363643431616433313234353162393438613734313366306131343266643430643439333437222c226d696e6572223a22307836643632343735303162383232666434656161373666636236346261656133363032373934393766222c227374617465526f6f74223a22307863336334343462666261656634333061666633376463613830363765656333653831656230663766633561653737656132663438383539363762613862666533222c227472616e73616374696f6e73526f6f74223a22307834626466323861626539373931373561393961613035323438363139643163393662653332623136343533306266333339363662326264373164376466643535222c227265636569707473526f6f74223a22307866396231623165616534383737353236373031316163613030616533353264656233663431353237346237333462353765643935633736643863656232643762222c226c6f6773426c6f6f6d223ac22646966666963756c7479223a22307832222c226e756d626572223a22307831353234393762222c226761734c696d6974223a22307831636133343235222c2267617355736564223a223078316361376336222c2274696d657374616d70223a2230783633303335313931222c22657874726144617461223a2230786439383330313031306138343637363537343638383936373666333132653331333632653331333538353663363936653735373830303030646533623361303466613632643864323262353265636333366436646638336432376333663932643462373931626566336466366263643838326332616366343262663830336130333636653639356433646365333366623630393337656137323730353966383361643337383032336139323435316639366338363034626339316466633935343030222c226d697848617368223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030222c226e6f6e6365223a22307830303030303030303030303030303030222c2262617365466565506572476173223a6e756c6c2c2268617368223a22307830356333646335303335633335643431396336333064366138386537383431616335633937653232373164633966303936623139643561316266316536353036227d"
	nextHeaderStr := "7b22706172656e7448617368223a22307830356333646335303335633335643431396336333064366138386537383431616335633937653232373164633966303936623139643561316266316536353036222c2273686133556e636c6573223a22307831646363346465386465633735643761616238356235363762366363643431616433313234353162393438613734313366306131343266643430643439333437222c226d696e6572223a22307839366335643230623261393735633035306534323230626532373661636534383932663462343161222c227374617465526f6f74223a22307866653232626564613965356162386464363563316538323363376337643438326662306633653766653439363433323035663134613865356463636636306632222c227472616e73616374696f6e73526f6f74223a22307866323931613135306461386137366332383032363434313061326635306339366462353536633130656336313462653136313732633632313165656335656466222c227265636569707473526f6f74223a22307861366337653333633162376631646561663766393162343464393834363164626339326163353136333837373237326632353239373561363363336138653263222c226c6f6773426c6f6f6d223a2230783032323030343230303035303032383031303030303030303331303032363030303832303030343038313161303031303630313030306230313830303034303430303032303030303030363034303030303038303430303030303030323038313034383230313032303038323030303430303036306338303830323231393463313031396334333031303430303330316330343630633064303032303030303033623130303431383030303830323132613034323038303231633031303030313030613230303230306132323032343030323030303330393061303234383331386130323432303030303030303032303438303030313930303039303463303031303032383030343030303030303531303030303430363238303430303232303031383030343830313430303030306130303030303030303030333030303230303231313038343030303030303830313061303030303030323030303030393230613038323030303031303030303430303031303030303030303030303133383238303032373265303434303030303030383030383230303030303030313634313034303030303230303434303630383038383065303032303032313230363238303138323230303030303030303032303930313231313830303430313130393038323030303030303034303030303030383230323030303638303830343034222c22646966666963756c7479223a22307832222c226e756d626572223a22307831353234393763222c226761734c696d6974223a22307831633963333830222c2267617355736564223a223078393162363162222c2274696d657374616d70223a2230783633303335313934222c22657874726144617461223a2230786438383330313031306238343637363537343638383836373666333132653331333832653332383536633639366537353738303030303030646533623361303430646537653531623362656236613461343862663564366462613139326436633366383632623638373965316439363532623562313134653164393137373733333065386161346130373963306135316263396336303233333433323731303761626339323130396231626537643030333133373239376336366637376633343031222c226d697848617368223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030222c226e6f6e6365223a22307830303030303030303030303030303030222c2262617365466565506572476173223a6e756c6c2c2268617368223a22307831396434316131373561343734656236356435386335316136323239336338343563333364666361633637343761303665613338306134373561356534383861227d"
	next2HeaderStr := "7b22706172656e7448617368223a22307831396434316131373561343734656236356435386335316136323239336338343563333364666361633637343761303665613338306134373561356534383861222c2273686133556e636c6573223a22307831646363346465386465633735643761616238356235363762366363643431616433313234353162393438613734313366306131343266643430643439333437222c226d696e6572223a22307839383061373565636431333039656131326661326564383761383734346662666339623836336435222c227374617465526f6f74223a22307836636331643562373964636132346339303933623666643534353536303163643066633937363762383936623430623432633361646638613035303862313836222c227472616e73616374696f6e73526f6f74223a22307832366136326137393337643437623665333361623336343730376164303463326331633765373233643132386237363433353461613933396334316362393134222c227265636569707473526f6f74223a22307836303733363530636239626536373031323664626662623936653234663430343934366631383931613062313531316365336336363830363032663361666565222c226c6f6773426c6f6f6d223ac22646966666963756c7479223a22307832222c226e756d626572223a22307831353234393764222c226761734c696d6974223a22307831636133356566222c2267617355736564223a223078313061613962222c2274696d657374616d70223a2230783633303335313937222c22657874726144617461223a2230786438383330313031306238343637363537343638383836373666333132653331333532653335383536633639366537353738303030303030646533623361303439336132343635373634373531333438323239303762656364636661353561343330353631386532363463633634316639383934316239333765353661643163353138383335343335663963366630366163663865383939626364646363316237653630363639643237366230326465306466316131626332353338356164623030222c226d697848617368223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030222c226e6f6e6365223a22307830303030303030303030303030303030222c2262617365466565506572476173223a6e756c6c2c2268617368223a22307831303961313932363133396664663165363231626637323862323561383430346434333037383139633430643466326431666333396561636165663533663530227d"
	headerBytes, err := hex.DecodeString(headerStr)
	require.NoError(t, err)
	nextHeaderBytes, err := hex.DecodeString(nextHeaderStr)
	require.NoError(t, err)
	next2HeaderBytes, err := hex.DecodeString(next2HeaderStr)
	require.NoError(t, err)
	header := new(ethTypes.Header)
	nextHeader := new(ethTypes.Header)
	next2Header := new(ethTypes.Header)
	err = json.Unmarshal(headerBytes, header)
	require.NoError(t, err)
	err = json.Unmarshal(nextHeaderBytes, nextHeader)
	require.NoError(t, err)
	err = json.Unmarshal(next2HeaderBytes, next2Header)
	require.NoError(t, err)
	validatorMap := map[ethCommon.Address]bool{
		ethCommon.HexToAddress("0x049153b8DAe0a232Ac90D20C78f1a5D1dE7B7dc5"): true,
		ethCommon.HexToAddress("0x1284214b9b9c85549aB3D2b972df0dEEf66aC2c9"): true,
		ethCommon.HexToAddress("0x35552c16704d214347f29Fa77f77DA6d75d7C752"): true,
		ethCommon.HexToAddress("0x6d6247501b822FD4Eaa76FCB64bAEa360279497f"): true,
		ethCommon.HexToAddress("0x96C5D20b2a975c050e4220BE276ACe4892f4b41A"): true,
		ethCommon.HexToAddress("0x980A75eCd1309eA12fa2ED87A8744fBfc9b863D5"): true,
		ethCommon.HexToAddress("0xA2959D3F95eAe5dC7D70144Ce1b73b403b7EB6E0"): true,
		ethCommon.HexToAddress("0xB71b214Cb885500844365E95CD9942C7276E7fD8"): true,
	}

	// Client
	cl := new(mocks.IClient)
	cl.On("GetChainID").Return(big.NewInt(97))
	cl.On("GetHeaderByHeight", mock.Anything, big.NewInt(height)).Return(header, nil)
	cl.On("GetHeaderByHeight", mock.Anything, big.NewInt(height+1)).Return(nextHeader, nil)
	cl.On("GetHeaderByHeight", mock.Anything, big.NewInt(height+2)).Return(next2Header, nil)
	cl.On("GetHeaderByHeight", mock.Anything, big.NewInt(height-height%int64(defaultEpochLength))).Return(&ethTypes.Header{Extra: validatorData}, nil)

	rx := &receiver{
		cls: []IClient{cl},
		log: log.New(),
		opts: ReceiverOptions{
			SyncConcurrency: 1,
			Verifier:        opts,
		},
	}
	vr, err := rx.newVerifier(context.Background(), opts)
	err = rx.syncVerifier(context.Background(), vr, next2Header.Number.Int64())
	require.NoError(t, err)
	require.NoError(t, err)
	require.Equal(t, vr.ParentHash().String(), nextHeader.Hash().String())
	require.Equal(t, vr.Next().Cmp((&big.Int{}).Add(nextHeader.Number, big.NewInt(1))), 0)
	for k := range validatorMap {
		require.Equal(t, vr.IsValidator(k, big.NewInt(height)), true)
	}
}

func TestReceiver_MockHasBTPMessage(t *testing.T) {
	height := big.NewInt(1)
	nextHeight := big.NewInt(2)
	ctrAddr := chain.BTPAddress(BSC_BMC_PERIPHERY).ContractAddress()
	queryHeight := ethereum.FilterQuery{
		FromBlock: height,
		ToBlock:   height,
		Addresses: []ethCommon.Address{ethCommon.HexToAddress(ctrAddr)},
	}
	queryNextHeight := ethereum.FilterQuery{
		FromBlock: nextHeight,
		ToBlock:   nextHeight,
		Addresses: []ethCommon.Address{ethCommon.HexToAddress(ctrAddr)},
	}

	cl := new(mocks.IClient)
	cl.On("FilterLogs", mock.Anything, queryHeight).Return([]ethTypes.Log{{Address: ethCommon.HexToAddress(ctrAddr), BlockNumber: height.Uint64()}}, nil)
	cl.On("FilterLogs", mock.Anything, queryNextHeight).Return([]ethTypes.Log{}, nil)
	cl.On("FilterLogs", mock.Anything, mock.Anything).Return([]ethTypes.Log{}, errors.New("ManuallyTriggered"))

	rx := &receiver{
		cls: []IClient{cl},
		log: log.New(),
		opts: ReceiverOptions{
			SyncConcurrency: 1,
		},
		src: BSC_BMC_PERIPHERY,
	}
	hasHeight, err := rx.hasBTPMessage(context.Background(), height)
	require.NoError(t, err)
	require.Equal(t, hasHeight, true)
	hasNextHeight, err := rx.hasBTPMessage(context.Background(), nextHeight)
	require.NoError(t, err)
	require.Equal(t, hasNextHeight, false)
	_, err = rx.hasBTPMessage(context.Background(), (&big.Int{}).Add(nextHeight, big.NewInt(1)))
	require.Error(t, err)
}

var blocks = map[int64]string{
	23033400: "7b22706172656e7448617368223a22307864393337633664636263383435613438373364333966623539666134346137366232386335303364353434623232653633306139346130393936316136393662222c2273686133556e636c6573223a22307831646363346465386465633735643761616238356235363762366363643431616433313234353162393438613734313366306131343266643430643439333437222c226d696e6572223a22307862373162323134636238383535303038343433363565393563643939343263373237366537666438222c227374617465526f6f74223a22307865663431663130366462373839666364613530653036316361663836616561303863323838333532663164666639616637626635646536386638396164656134222c227472616e73616374696f6e73526f6f74223a22307833316639343839366135343465663239616464393731306330663338373061666437313839323839366230613464663131343339643231623538313934383161222c227265636569707473526f6f74223a22307863363339346363616638653538326134653837393566393766613463323734313666396661656230343766323165393362353062303963396366643133356237222c226c6f6773426c6f6f6d223ac22646966666963756c7479223a22307832222c226e756d626572223a22307831356637363338222c226761734c696d6974223a22307832666166303830222c2267617355736564223a223078323033633237222c2274696d657374616d70223a2230783633326166333537222c22657874726144617461223a223078643938333031303130643834363736353734363838393637366633313265333133373265333133323835366336393665373537383030303031656234633331393034393135336238646165306132333261633930643230633738663161356431646537623764633531323834323134623962396338353534396162336432623937326466306465656636366163326339333535353263313637303464323134333437663239666137376637376461366437356437633735323938306137356563643133303965613132666132656438376138373434666266633962383633643561323935396433663935656165356463376437303134346365316237336234303362376562366530623731623231346362383835353030383434333635653935636439393432633732373665376664386634373463663033636365666632386162633635633963626165353934663732356338306531326433343933653231326466313237303361626439383961656437636464356666646530303766366130383063383639653933613432326436356462303965326166353665313437353836653436656232363430373131656261316331643239653662333435646565306437366461613632653938336264353863386362353531643031222c226d697848617368223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030222c226e6f6e6365223a22307830303030303030303030303030303030222c2262617365466565506572476173223a6e756c6c2c2268617368223a22307839343162663865666232363634313931643532666463343734356561303731323961613630333230393763306134333461633065363532663539326164303066227d",
	23033451: "7b22706172656e7448617368223a22307837383762343230393639623738343262623465663535323765386438346237636134316234386333396538633633646233376261313139633634306365373866222c2273686133556e636c6573223a22307831646363346465386465633735643761616238356235363762366363643431616433313234353162393438613734313366306131343266643430643439333437222c226d696e6572223a22307830343931353362386461653061323332616339306432306337386631613564316465376237646335222c227374617465526f6f74223a22307861653462363834393339383262626230303562613962306436313365343632353361613831316630363139316330626137323835363766353536623530346234222c227472616e73616374696f6e73526f6f74223a22307861616233383566303232363666366534656235386534363135633033343931623832336136656438633132653265326438626233343439636135653762653131222c227265636569707473526f6f74223a22307836636465626538373938323136613432376565626336383332376565363732366638373134323331653037346366653864366637636234366132333263313632222c226c6f6773426c6f6f6d223ac22646966666963756c7479223a22307832222c226e756d626572223a22307831356637363662222c226761734c696d6974223a22307832663766353931222c2267617355736564223a223078323066313639222c2274696d657374616d70223a2230783633326166336630222c22657874726144617461223a2230786439383330313031306438343637363537343638383936373666333132653331333632653331333038353663363936653735373830303030316562346333313932373733613238646336313634383733363266633231363535646631663337646430656439343161333062383062653261306262616165353964646332323731323339323438613765636463333935323638343938643838663662363538373136623035376630366164623430313730333365613133663432313463323433643031222c226d697848617368223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030222c226e6f6e6365223a22307830303030303030303030303030303030222c2262617365466565506572476173223a6e756c6c2c2268617368223a22307835356633666137646230373664353531393265626239353766623562333539316164313436346164383434343835396535643861626639656335663239643833227d",
	23033452: "7b22706172656e7448617368223a22307835356633666137646230373664353531393265626239353766623562333539316164313436346164383434343835396535643861626639656335663239643833222c2273686133556e636c6573223a22307831646363346465386465633735643761616238356235363762366363643431616433313234353162393438613734313366306131343266643430643439333437222c226d696e6572223a22307831323834323134623962396338353534396162336432623937326466306465656636366163326339222c227374617465526f6f74223a22307833323934363031373031313930666563373666316632636433346432363932613437633562373437643439666139373231653536343139323465613031363838222c227472616e73616374696f6e73526f6f74223a22307865393436666130633236666663316336616662353061393638343836633464626138306166366664383234346135353639306231653735353363373831623333222c227265636569707473526f6f74223a22307833303834633739663336393737396130373462383833323965616366323230306563623162363736636465353630636133663830616437306366353661313733222c226c6f6773426c6f6f6d223ac22646966666963756c7479223a22307832222c226e756d626572223a22307831356637363663222c226761734c696d6974223a22307832663466643964222c2267617355736564223a223078336239353939222c2274696d657374616d70223a2230783633326166336633222c22657874726144617461223a2230786439383330313031306438343637363537343638383936373666333132653331333732653331333238353663363936653735373830303030316562346333313939346362386538633031313031343837366339363636346533656461333636346333333634316435343937383634306162396266623938633330373736373936313335313239346633316630393931656163623630633665363062636638366164353931643836333934663762396236386338313438363764383265633763303031222c226d697848617368223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030222c226e6f6e6365223a22307830303030303030303030303030303030222c2262617365466565506572476173223a6e756c6c2c2268617368223a22307861663263333537353361343335393064313332643963633566303836376363386531363437643961303931356662663334333862656263343936633864636163227d",
	23033453: "7b22706172656e7448617368223a22307861663263333537353361343335393064313332643963633566303836376363386531363437643961303931356662663334333862656263343936633864636163222c2273686133556e636c6573223a22307831646363346465386465633735643761616238356235363762366363643431616433313234353162393438613734313366306131343266643430643439333437222c226d696e6572223a22307833353535326331363730346432313433343766323966613737663737646136643735643763373532222c227374617465526f6f74223a22307834346233396239623437393933306533616666653430313634616530623736386464306662316565396430343135303265373338376236663761333032343834222c227472616e73616374696f6e73526f6f74223a22307838356161343161633430653339383931396430386238663665346439306331353165343233633839356162376233653562363238653632393864306164663562222c227265636569707473526f6f74223a22307837633738386337396239336566623339653938666265393262313065363534363533633965356432303564633233353565326566653833643937396533343532222c226c6f6773426c6f6f6d223ac22646966666963756c7479223a22307832222c226e756d626572223a22307831356637363664222c226761734c696d6974223a22307832663766323939222c2267617355736564223a223078313038613636222c2274696d657374616d70223a2230783633326166336636222c22657874726144617461223a2230786439383330313031306438343637363537343638383936373666333132653331333732653331333238353663363936653735373830303030316562346333313933306132306233653134313362303937346665313964356133363062393161313734343337663439383034333466313835623737616231356530353539356430343036653831386139653833323335343665366536343835383039363837306434336564616130633836393739383839646664356162343838333532323337323030222c226d697848617368223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030222c226e6f6e6365223a22307830303030303030303030303030303030222c2262617365466565506572476173223a6e756c6c2c2268617368223a22307862373237333665366239653939393738313232626132616163376231396461353063303064373139383533383265396235613737363232653964343663393563227d",
	23033454: "7b22706172656e7448617368223a22307862373237333665366239653939393738313232626132616163376231396461353063303064373139383533383265396235613737363232653964343663393563222c2273686133556e636c6573223a22307831646363346465386465633735643761616238356235363762366363643431616433313234353162393438613734313366306131343266643430643439333437222c226d696e6572223a22307839383061373565636431333039656131326661326564383761383734346662666339623836336435222c227374617465526f6f74223a22307866303861363763396266626566623938353232303035633762376330303737323665646637336235623631643835323630323461376531646531346437393134222c227472616e73616374696f6e73526f6f74223a22307861613062356165613030336266636665616561656439303236343266333962633734653836363034613237393330343863393435373836636532323334333962222c227265636569707473526f6f74223a22307837343064316666376536363066363831626432653966636462613436663265366339626562663938303739323133346365393163333266323961373766323633222c226c6f6773426c6f6f6d223ac22646966666963756c7479223a22307832222c226e756d626572223a22307831356637363665222c226761734c696d6974223a22307832666165613861222c2267617355736564223a223078313130393761222c2274696d657374616d70223a2230783633326166336639222c22657874726144617461223a2230786439383330313031306438343637363537343638383936373666333132653331333732653331333238353663363936653735373830303030316562346333313961363530666566633662613366636466336432393761393137376132373434626165636633313063613034373532666236666166653565336363393963613939303233663166656435666435343737313236613437633130323036393833336433626230396534396234306535303861316236613239633162306638386534393031222c226d697848617368223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030222c226e6f6e6365223a22307830303030303030303030303030303030222c2262617365466565506572476173223a6e756c6c2c2268617368223a22307865373061326434363434653836663333386562363434623266646631653665313731666330626466623735393861633465343364363632386337393263636362227d",
	23033455: "7b22706172656e7448617368223a22307865373061326434363434653836663333386562363434623266646631653665313731666330626466623735393861633465343364363632386337393263636362222c2273686133556e636c6573223a22307831646363346465386465633735643761616238356235363762366363643431616433313234353162393438613734313366306131343266643430643439333437222c226d696e6572223a22307861323935396433663935656165356463376437303134346365316237336234303362376562366530222c227374617465526f6f74223a22307837316661653132353932653338323461316630323739386231303437653039303065633035393936323765326236316538616538643230333766616338363063222c227472616e73616374696f6e73526f6f74223a22307863376431663366316463323934346166343761653837376337393334346666646437366437343739363631343134616132386239316331383138376334626630222c227265636569707473526f6f74223a22307862353033613137333532613032346531333162653135363133333834663961343034306563356661333636636264373161306665366231646538643665323236222c226c6f6773426c6f6f6d223ac22646966666963756c7479223a22307832222c226e756d626572223a22307831356637363666222c226761734c696d6974223a22307832666166303830222c2267617355736564223a223078343634306162222c2274696d657374616d70223a2230783633326166336663222c22657874726144617461223a2230786439383330313031306438343637363537343638383936373666333132653331333732653331333238353663363936653735373830303030316562346333313936303132343436383636656661633563356563313066616230656233383136363138303662393835396530386232386431353364353130343664636366343935343230383031353764313635323838636337376136616363613536333032383535383635383935663235323931303735623134393539323137316338643264653031222c226d697848617368223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030222c226e6f6e6365223a22307830303030303030303030303030303030222c2262617365466565506572476173223a6e756c6c2c2268617368223a22307836666438623262346430336562336237303039323830326162636437616466363232333362623066303666346136653432396434373764323630353964393361227d",
}

func Test_MockReceiveLoop(t *testing.T) {
	blockHasBTPMessage := map[int]bool{23033451: true, 23033453: true, 23033455: true}
	bmcAddr := chain.BTPAddress("btp://0x61.bsc/0xACBA72f72a56A15dBBFFFD638999Fd80A89A19Cf")
	ctrAddr := bmcAddr.ContractAddress()

	cl := new(mocks.IClient)
	cl.On("GetBlockNumber").Return(uint64(23033455+BlockFinalityConfirmations), nil)
	cl.On("GetBlockReceipts", mock.Anything).Return(ethTypes.Receipts{&ethTypes.Receipt{}, &ethTypes.Receipt{}}, nil)
	for height := 23033451; height <= 23033455; height++ {
		h := getHeaderFromStr(t, blocks[int64(height)])
		cl.On("GetHeaderByHeight", mock.Anything, big.NewInt(int64(height))).Return(h, nil)
		if _, ok := blockHasBTPMessage[height]; ok {
			cl.On("FilterLogs", mock.Anything, ethereum.FilterQuery{FromBlock: big.NewInt(int64(height)), ToBlock: big.NewInt(int64(height)), Addresses: []ethCommon.Address{ethCommon.HexToAddress(ctrAddr)}}).Return([]ethTypes.Log{{Address: ethCommon.HexToAddress(ctrAddr), BlockNumber: uint64(height)}}, nil)
		} else {
			cl.On("FilterLogs", mock.Anything, ethereum.FilterQuery{FromBlock: big.NewInt(int64(height)), ToBlock: big.NewInt(int64(height)), Addresses: []ethCommon.Address{ethCommon.HexToAddress(ctrAddr)}}).Return([]ethTypes.Log{}, nil)
		}
		continue
	}
	cl.On("GetHeaderByHeight", mock.Anything, mock.Anything).Return(&ethTypes.Header{}, nil)
	rx := &receiver{
		cls: []IClient{cl},
		log: log.New(),
		opts: ReceiverOptions{
			SyncConcurrency: 1,
		},
		src: bmcAddr,
	}
	ctx, cancel := context.WithTimeout(context.Background(), 15*time.Second)
	defer cancel()
	err := rx.receiveLoop(ctx, &BnOptions{StartHeight: 23033451, Concurrency: 1},
		func(v *types.BlockNotification) error {
			if v.HasBTPMessage != nil && *v.HasBTPMessage {
				if !blockHasBTPMessage[int(v.Height.Int64())] {
					return fmt.Errorf("Expected hasBTPMessage %v Got %v", blockHasBTPMessage[int(v.Height.Int64())], *v.HasBTPMessage)
				}
			}
			hbytes, _ := v.Header.MarshalJSON()
			if _, ok := blocks[v.Height.Int64()]; ok && hex.EncodeToString(hbytes) != blocks[v.Height.Int64()] {
				return fmt.Errorf("Different Header for height %v", v.Height.Int64())
			}
			t.Logf("Processed Height %v", v.Height)
			return nil
		},
	)
	require.NoError(t, err)
}

func Test_MockSubscribe(t *testing.T) {
	blockHasBTPMessage := map[int]bool{23033451: true, 23033453: true, 23033455: true}
	bmcAddr := chain.BTPAddress("btp://0x61.bsc/0xACBA72f72a56A15dBBFFFD638999Fd80A89A19Cf")
	ctrAddr := bmcAddr.ContractAddress()

	cl := new(mocks.IClient)
	cl.On("GetBlockNumber").Return(uint64(23033455+BlockFinalityConfirmations), nil)

	for height := 23033451; height <= 23033455; height++ {
		h := getHeaderFromStr(t, blocks[int64(height)])
		cl.On("GetHeaderByHeight", mock.Anything, big.NewInt(int64(height))).Return(h, nil)
		if _, ok := blockHasBTPMessage[height]; ok {
			cl.On("FilterLogs", mock.Anything, ethereum.FilterQuery{FromBlock: big.NewInt(int64(height)), ToBlock: big.NewInt(int64(height)), Addresses: []ethCommon.Address{ethCommon.HexToAddress(ctrAddr)}}).Return([]ethTypes.Log{{Address: ethCommon.HexToAddress(ctrAddr), BlockNumber: uint64(height)}}, nil)
			cl.On("GetBlockReceipts", h.Hash()).Return(ethTypes.Receipts{&ethTypes.Receipt{Logs: []*ethTypes.Log{{Address: ethCommon.HexToAddress(ctrAddr), BlockNumber: uint64(height)}}}}, nil)
		} else {
			cl.On("FilterLogs", mock.Anything, ethereum.FilterQuery{FromBlock: big.NewInt(int64(height)), ToBlock: big.NewInt(int64(height)), Addresses: []ethCommon.Address{ethCommon.HexToAddress(ctrAddr)}}).Return([]ethTypes.Log{}, nil)
			cl.On("GetBlockReceipts", h.Hash()).Return(ethTypes.Receipts{&ethTypes.Receipt{Logs: []*ethTypes.Log{}}}, nil)
		}
		continue
	}
	cl.On("GetHeaderByHeight", mock.Anything, mock.Anything).Return(&ethTypes.Header{}, nil)
	cl.On("ParseMessage", mock.Anything).Return(&bmcperiphery.BmcperipheryMessage{Next: bmcAddr.ContractAddress(), Seq: big.NewInt(1), Msg: []byte{}}, nil)
	rx := &receiver{
		cls: []IClient{cl},
		log: log.New(),
		opts: ReceiverOptions{
			SyncConcurrency: 1,
		},
		src: bmcAddr,
	}
	ctx, cancel := context.WithTimeout(context.Background(), 15*time.Second)
	defer cancel()
	msgCh := make(chan *chain.Message)
	errChan, err := rx.Subscribe(ctx, msgCh, chain.SubscribeOptions{Seq: 0, Height: 23033451})
	require.NoError(t, err)
	counter := 0
	for {
		select {
		case <-ctx.Done():
			return
		case err := <-errChan:
			require.NoError(t, err)
			return
		case msg := <-msgCh:
			for _, r := range msg.Receipts {
				if _, ok := blockHasBTPMessage[int(r.Height)]; !ok {
					require.NoError(t, fmt.Errorf("Unexpected Height has BTP Message %v", r.Height))
					return
				}
				counter++
			}
			counter++
			if counter == len(blockHasBTPMessage) {
				return
			}
		}
	}

}

func getHeaderFromStr(t *testing.T, headerStr string) *ethTypes.Header {
	headerBytes, err := hex.DecodeString(headerStr)
	require.NoError(t, err)
	header := new(ethTypes.Header)
	err = json.Unmarshal(headerBytes, header)
	require.NoError(t, err)
	return header
}

func TestSender_MockStatus(t *testing.T) {
	iconBMC := chain.BTPAddress("btp://0x2.icon/cxfa5b7b8d71bf6355bf230ff22e1d4777a630c7ec")
	bscBMC := chain.BTPAddress("btp://0x61.bsc/0xACBA72f72a56A15dBBFFFD638999Fd80A89A19Cf")
	cl := new(mocks.IClient)
	s := &sender{
		cls: []IClient{cl},
		dst: iconBMC,
		src: bscBMC,
	}
	status := bmcperiphery.TypesLinkStats{
		RxSeq:         big.NewInt(7),
		TxSeq:         big.NewInt(17),
		RxHeight:      big.NewInt(27),
		CurrentHeight: big.NewInt(37),
	}
	cl.On("GetStatus", mock.Anything, bscBMC.String()).Return(status, nil)
	res, err := s.Status(context.Background())
	require.NoError(t, err)
	require.NotNil(t, res)
	require.Equal(t, res.TxSeq, status.TxSeq.Uint64())
	require.Equal(t, res.RxSeq, status.RxSeq.Uint64())
	require.Equal(t, res.RxHeight, status.RxHeight.Uint64())
	require.Equal(t, res.CurrentHeight, status.CurrentHeight.Uint64())
}

func TestSender_MockBalance(t *testing.T) {
	iconBMC := chain.BTPAddress("btp://0x2.icon/cxfa5b7b8d71bf6355bf230ff22e1d4777a630c7ec")
	bscBMC := chain.BTPAddress("btp://0x61.bsc/0xACBA72f72a56A15dBBFFFD638999Fd80A89A19Cf")

	thres := intconv.BigInt{}
	thres.SetString("100000000000000000000", 10)
	sopts := senderOptions{
		GasLimit:         24000000,
		TxDataSizeLimit:  8192,
		BalanceThreshold: thres,
		BoostGasPrice:    1,
	}
	privKey, err := crypto.GenerateKey()
	require.NoError(t, err)
	w := &wallet.EvmWallet{Skey: privKey, Pkey: &privKey.PublicKey}
	cl := new(mocks.IClient)
	inputBal := big.NewInt(117)
	cl.On("GetBalance", mock.Anything, w.Address()).Return(inputBal, nil)

	s := &sender{
		cls:  []IClient{cl},
		dst:  iconBMC,
		src:  bscBMC,
		opts: sopts,
		w:    w,
	}

	retBal, retThres, err := s.Balance(context.Background())
	require.NoError(t, err)
	require.NotNil(t, retBal)
	require.NotNil(t, retThres)
	require.Equal(t, retBal.Cmp(inputBal), 0)
	require.Equal(t, thres.Cmp(retThres), 0)
}

func TestSender_MockSegment(t *testing.T) {
	iconBMC := chain.BTPAddress("btp://0x2.icon/cxfa5b7b8d71bf6355bf230ff22e1d4777a630c7ec")
	bscBMC := chain.BTPAddress("btp://0x61.bsc/0xACBA72f72a56A15dBBFFFD638999Fd80A89A19Cf")

	thres := intconv.BigInt{}
	thres.SetString("100000000000000000000", 10)
	sopts := senderOptions{
		GasLimit:         24000000,
		TxDataSizeLimit:  8192,
		BalanceThreshold: thres,
		BoostGasPrice:    1,
	}
	privKey, err := crypto.GenerateKey()
	require.NoError(t, err)
	w := &wallet.EvmWallet{Skey: privKey, Pkey: &privKey.PublicKey}
	cl := new(mocks.IClient)
	medianGasPrice := big.NewInt(117)
	cl.On("GetMedianGasPriceForBlock", mock.Anything).Return(medianGasPrice, big.NewInt(1), nil)
	cl.On("GetChainID").Return(big.NewInt(97))
	cl.On("SuggestGasPrice", mock.Anything).Return(medianGasPrice, nil)
	cl.On("Log").Return(log.New())
	cl.On("NonceAt", mock.Anything, mock.Anything, mock.Anything).Return(uint64(1), nil)
	cl.On("HandleRelayMessage", mock.Anything, mock.Anything, mock.Anything).Return(nil, errors.New("not implemented"))

	s := &sender{
		cls:          []IClient{cl},
		dst:          iconBMC,
		src:          bscBMC,
		opts:         sopts,
		w:            w,
		prevGasPrice: big.NewInt(100),
		log:          log.New(),
	}
	msg := &chain.Message{
		From: "",
		Receipts: []*chain.Receipt{{
			Index:  0,
			Height: 1,
			Events: []*chain.Event{},
		}},
	}
	tx, _, err := s.Segment(context.Background(), msg)
	require.NoError(t, err)
	err = tx.Send(context.TODO())
	require.Equal(t, err.Error(), "not implemented")
}

func TestClient_MockMedianGasPrice(t *testing.T) {
	cl := new(mocks.IClient)
	txnCount := 12
	medianTxnStr := "7b2274797065223a22307830222c226e6f6e6365223a22307838336231222c226761735072696365223a223078323534306265343030222c226d61785072696f72697479466565506572476173223a6e756c6c2c226d6178466565506572476173223a6e756c6c2c22676173223a22307839323336222c2276616c7565223a22307830222c22696e707574223a223078663761333038303630303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303162633831653864383430222c2276223a2230786536222c2272223a22307832303539323338643365396438663635383030393461633836353364326563363734366335346166623337613566336236623634623130663265376566356137222c2273223a22307831616333303834366335353665346534376465323664633538373962613266343331633432373635626364636363616139653538643036333265323031613837222c22746f223a22307834363534646566386564613866666331363036323031373734663235376338356166313663616332222c2268617368223a22307864666531363736633564306333333832613566306431326639393332626230633433346465363163366638383332643838386366643762303636323832373934227d"
	gasPrice := big.NewInt(10000000000)
	medianTxnBytes, err := hex.DecodeString(medianTxnStr)
	require.NoError(t, err)
	txn := new(ethTypes.Transaction)
	err = json.Unmarshal(medianTxnBytes, txn)
	require.NoError(t, err)

	h := getHeaderFromStr(t, blocks[int64(23033400)])
	cl.On("GetHeaderByHeight", mock.Anything, mock.Anything, mock.Anything).Return(h, nil)
	cl.On("TransactionCount", mock.Anything, h.Hash()).Return(uint(txnCount), nil)
	cl.On("TransactionInBlock", mock.Anything, h.Hash(), uint(txnCount/2)).Return(txn, nil)
	newCl := &Client{mock: cl}
	retPrice, retHeight, err := newCl.GetMedianGasPriceForBlock(context.Background())
	require.NoError(t, err)
	require.Equal(t, retPrice.Cmp(gasPrice), 0)
	require.Equal(t, retHeight.Cmp(h.Number), 0)
}

func TestClient_MockBlockReceipts(t *testing.T) {
	blkHash := ethCommon.HexToHash("0x941bf8efb2664191d52fdc4745ea07129aa6032097c0a434ac0e652f592ad00f")
	//blkNumber := 23033400
	blk := &types.Block{
		Transactions: []string{"0x4d2c7826773b5e9a74eebff4fa6cba796faf6e318c4710a45b4afba7830de5da", "0x33f061ca51140df25c48d52e867df338b3771b431035d7b8bd2045346fec0372"},
		GasUsed:      "0x203c27",
	}
	hash1 := ethCommon.HexToHash("0x4d2c7826773b5e9a74eebff4fa6cba796faf6e318c4710a45b4afba7830de5da")
	hash2 := ethCommon.HexToHash("0x33f061ca51140df25c48d52e867df338b3771b431035d7b8bd2045346fec0372")
	rcpt1 := new(ethTypes.Receipt)
	rcpt2 := new(ethTypes.Receipt)
	rcpt1Bts, _ := hex.DecodeString(txnHashToReceipts["0x4d2c7826773b5e9a74eebff4fa6cba796faf6e318c4710a45b4afba7830de5da"])
	rcpt2Bts, _ := hex.DecodeString(txnHashToReceipts["0x33f061ca51140df25c48d52e867df338b3771b431035d7b8bd2045346fec0372"])
	json.Unmarshal(rcpt1Bts, rcpt1)
	json.Unmarshal(rcpt2Bts, rcpt2)
	cl := new(mocks.IClient)
	cl.On("GetBlockByHash", blkHash).Return(blk, nil)
	cl.On("TransactionReceipt", mock.Anything, hash1).Return(rcpt1, nil)
	cl.On("TransactionReceipt", mock.Anything, hash2).Return(rcpt2, nil)
	newCl := &Client{mock: cl}
	rcpts, err := newCl.GetBlockReceipts(blkHash)
	require.NoError(t, err)
	require.NotNil(t, rcpts)

	for _, rcpt := range rcpts {
		retBytes, _ := rcpt.MarshalJSON()
		if !bytes.Equal(retBytes, rcpt1Bts) && !bytes.Equal(retBytes, rcpt2Bts) {
			err = fmt.Errorf("Unexpected receipt bytes")
		}
	}
	require.NoError(t, err)
}

var txnHashToReceipts = map[string]string{
	"0x4d2c7826773b5e9a74eebff4fa6cba796faf6e318c4710a45b4afba7830de5da": "7b22726f6f74223a223078222c22737461747573223a22307831222c2263756d756c617469766547617355736564223a22307863373966222c226c6f6773426c6f6f6d223ac226c6f6773223a5b7b2261646472657373223a22307833333736313064323763363832653334376339636436306264346233623130376339643334646464222c22746f70696373223a5b22307864646632353261643162653263383962363963326230363866633337386461613935326261376631363363346131313632386635356134646635323362336566222c22307830303030303030303030303030303030303030303030303061613235616137613139663963343236653037646565353962313266393434663464396631646433222c22307830303030303030303030303030303030303030303030303034356564336138623866663132393365356561356135396665343034396333316632333863623338225d2c2264617461223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303038616337323330343839653830303030222c22626c6f636b4e756d626572223a22307831356637363338222c227472616e73616374696f6e48617368223a22307834643263373832363737336235653961373465656266663466613663626137393666616636653331386334373130613435623461666261373833306465356461222c227472616e73616374696f6e496e646578223a22307830222c22626c6f636b48617368223a22307839343162663865666232363634313931643532666463343734356561303731323961613630333230393763306134333461633065363532663539326164303066222c226c6f67496e646578223a22307830222c2272656d6f766564223a66616c73657d5d2c227472616e73616374696f6e48617368223a22307834643263373832363737336235653961373465656266663466613663626137393666616636653331386334373130613435623461666261373833306465356461222c22636f6e747261637441646472657373223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030222c2267617355736564223a22307863373966222c22626c6f636b48617368223a22307839343162663865666232363634313931643532666463343734356561303731323961613630333230393763306134333461633065363532663539326164303066222c22626c6f636b4e756d626572223a22307831356637363338222c227472616e73616374696f6e496e646578223a22307830227d",
	"0x33f061ca51140df25c48d52e867df338b3771b431035d7b8bd2045346fec0372": "7b22726f6f74223a223078222c22737461747573223a22307831222c2263756d756c617469766547617355736564223a2230783739613537222c226c6f6773426c6f6f6d223ac226c6f6773223a5b5d2c227472616e73616374696f6e48617368223a22307833336630363163613531313430646632356334386435326538363764663333386233373731623433313033356437623862643230343533343666656330333732222c22636f6e747261637441646472657373223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030222c2267617355736564223a22307866383336222c22626c6f636b48617368223a22307839343162663865666232363634313931643532666463343734356561303731323961613630333230393763306134333461633065363532663539326164303066222c22626c6f636b4e756d626572223a22307831356637363338222c227472616e73616374696f6e496e646578223a22307833227d",
}
