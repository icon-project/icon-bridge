// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	big "math/big"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// IVerifier is an autogenerated mock type for the IVerifier type
type IVerifier struct {
	mock.Mock
}

// IsValidator provides a mock function with given fields: addr
func (_m *IVerifier) IsValidator(addr common.Address) bool {
	ret := _m.Called(addr)

	var r0 bool
	if rf, ok := ret.Get(0).(func(common.Address) bool); ok {
		r0 = rf(addr)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Next provides a mock function with given fields:
func (_m *IVerifier) Next() *big.Int {
	ret := _m.Called()

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func() *big.Int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	return r0
}

// ParentHash provides a mock function with given fields:
func (_m *IVerifier) ParentHash() common.Hash {
	ret := _m.Called()

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func() common.Hash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	return r0
}

// Update provides a mock function with given fields: header
func (_m *IVerifier) Update(header *types.Header) error {
	ret := _m.Called(header)

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Header) error); ok {
		r0 = rf(header)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Verify provides a mock function with given fields: header, nextHeader, receipts
func (_m *IVerifier) Verify(header *types.Header, nextHeader *types.Header, receipts types.Receipts) error {
	ret := _m.Called(header, nextHeader, receipts)

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Header, *types.Header, types.Receipts) error); ok {
		r0 = rf(header, nextHeader, receipts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
