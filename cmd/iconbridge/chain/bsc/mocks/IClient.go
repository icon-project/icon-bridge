// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	big "math/big"

	common "github.com/ethereum/go-ethereum/common"

	context "context"

	coretypes "github.com/ethereum/go-ethereum/core/types"

	ethclient "github.com/ethereum/go-ethereum/ethclient"

	log "github.com/icon-project/icon-bridge/common/log"

	mock "github.com/stretchr/testify/mock"

	types "github.com/icon-project/icon-bridge/cmd/iconbridge/chain/bsc/types"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// GetBalance provides a mock function with given fields: ctx, hexAddr
func (_m *IClient) GetBalance(ctx context.Context, hexAddr string) (*big.Int, error) {
	ret := _m.Called(ctx, hexAddr)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(context.Context, string) *big.Int); ok {
		r0 = rf(ctx, hexAddr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, hexAddr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockByHash provides a mock function with given fields: hash
func (_m *IClient) GetBlockByHash(hash common.Hash) (*types.Block, error) {
	ret := _m.Called(hash)

	var r0 *types.Block
	if rf, ok := ret.Get(0).(func(common.Hash) *types.Block); ok {
		r0 = rf(hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Block)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Hash) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockNumber provides a mock function with given fields:
func (_m *IClient) GetBlockNumber() (uint64, error) {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockReceipts provides a mock function with given fields: hash
func (_m *IClient) GetBlockReceipts(hash common.Hash) (coretypes.Receipts, error) {
	ret := _m.Called(hash)

	var r0 coretypes.Receipts
	if rf, ok := ret.Get(0).(func(common.Hash) coretypes.Receipts); ok {
		r0 = rf(hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(coretypes.Receipts)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Hash) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChainID provides a mock function with given fields:
func (_m *IClient) GetChainID() *big.Int {
	ret := _m.Called()

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func() *big.Int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	return r0
}

// GetEthClient provides a mock function with given fields:
func (_m *IClient) GetEthClient() *ethclient.Client {
	ret := _m.Called()

	var r0 *ethclient.Client
	if rf, ok := ret.Get(0).(func() *ethclient.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ethclient.Client)
		}
	}

	return r0
}

// GetHeaderByHeight provides a mock function with given fields: height
func (_m *IClient) GetHeaderByHeight(height *big.Int) (*coretypes.Header, error) {
	ret := _m.Called(height)

	var r0 *coretypes.Header
	if rf, ok := ret.Get(0).(func(*big.Int) *coretypes.Header); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coretypes.Header)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*big.Int) error); ok {
		r1 = rf(height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMedianGasPriceForBlock provides a mock function with given fields: ctx
func (_m *IClient) GetMedianGasPriceForBlock(ctx context.Context) (*big.Int, *big.Int, error) {
	ret := _m.Called(ctx)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(context.Context) *big.Int); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	var r1 *big.Int
	if rf, ok := ret.Get(1).(func(context.Context) *big.Int); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*big.Int)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Log provides a mock function with given fields:
func (_m *IClient) Log() log.Logger {
	ret := _m.Called()

	var r0 log.Logger
	if rf, ok := ret.Get(0).(func() log.Logger); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(log.Logger)
		}
	}

	return r0
}
