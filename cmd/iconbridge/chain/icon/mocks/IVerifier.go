// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	common "github.com/icon-project/goloop/common"

	mock "github.com/stretchr/testify/mock"

	types "github.com/icon-project/icon-bridge/cmd/iconbridge/chain/icon/types"
)

// VerifierMock is an autogenerated mock type for the IVerifier type
type VerifierMock struct {
	mock.Mock
}

// Next provides a mock function with given fields:
func (_m *VerifierMock) Next() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Update provides a mock function with given fields: blockHeader, nextValidators
func (_m *VerifierMock) Update(blockHeader *types.BlockHeader, nextValidators []common.Address) error {
	ret := _m.Called(blockHeader, nextValidators)

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.BlockHeader, []common.Address) error); ok {
		r0 = rf(blockHeader, nextValidators)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Validators provides a mock function with given fields: nextValidatorsHash
func (_m *VerifierMock) Validators(nextValidatorsHash common.HexBytes) []common.Address {
	ret := _m.Called(nextValidatorsHash)

	var r0 []common.Address
	if rf, ok := ret.Get(0).(func(common.HexBytes) []common.Address); ok {
		r0 = rf(nextValidatorsHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.Address)
		}
	}

	return r0
}

// Verify provides a mock function with given fields: blockHeader, votes
func (_m *VerifierMock) Verify(blockHeader *types.BlockHeader, votes []byte) (bool, error) {
	ret := _m.Called(blockHeader, votes)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*types.BlockHeader, []byte) bool); ok {
		r0 = rf(blockHeader, votes)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*types.BlockHeader, []byte) error); ok {
		r1 = rf(blockHeader, votes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewVerifierMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewVerifierMock creates a new instance of VerifierMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewVerifierMock(t mockConstructorTestingTNewVerifierMock) *VerifierMock {
	mock := &VerifierMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
