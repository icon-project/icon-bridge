version = '0.1.0'

apply plugin: "jacoco"

dependencies {
    compileOnly("foundation.icon:javaee-api:$javaeeVersion")
    implementation("foundation.icon:javaee-scorex:$scorexVersion")
    implementation fileTree(dir: '../lib', include: 'score-util.jar')
    implementation fileTree(dir: '../lib', include: 'lib-0.1.0.jar')
    implementation("com.github.sink772:javaee-tokens:0.6.0")

    testImplementation("org.junit.jupiter:junit-jupiter-api:$jupiterVersion")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$jupiterVersion")

    testImplementation("foundation.icon:javaee-unittest:$javaeeUnittestVersion")
    testImplementation fileTree(dir: '../lib', include: 'test-lib-0.1.0.jar')
    testAnnotationProcessor("foundation.icon:javaee-score-client:$scoreClientVersion")
    testImplementation("foundation.icon:javaee-score-client:$scoreClientVersion")
    testImplementation("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
    testImplementation("foundation.icon:icon-sdk:$iconsdkVersion")
    testImplementation("com.github.javafaker:javafaker:1.0.2")
    testImplementation('org.mockito:mockito-core:4.3.1')
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: '4.3.0'
    testImplementation 'org.bouncycastle:bcprov-jdk15on:1.60'
}

test{
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}
jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled true
        csv.enabled true
    }
    subprojects.each {
        sourceSets it.sourceSets.main
    }
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
}

optimizedJar {
    mainClassName = 'foundation.icon.btp.bts.BTPTokenService'
//    archivesBaseName = 'bts'
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } { exclude "score/*" }
    enableDebug = debugJar
    archiveFileName = 'bts.jar'
}